<?xml version="1.0"?>
<root>

  <!--     This is what you need to know about key transformations that occur    -->
  <!-- when `Karabiner` aka `KeyRemap4macbook` gets in the middle. Keys are      -->
  <!-- effectively of two types:                                                 -->
  <!--                                                                           -->
  <!-- [osx] this is what OS receives and essentially what you believe you       -->
  <!-- press, as in when sending Cmd-F (OSX find) it is the meaning not the      -->
  <!-- physical keys you have in mind, the actual physical keys pressed and      -->
  <!-- thus bytes generated can have different names spelled out on your         -->
  <!-- physical keyboard. You can think of [osx] as essence, meaning.            -->
  <!--                                                                           -->
  <!-- [raw] is the actual raw keycode (byte) being sent - mapping between       -->
  <!-- the physical key you pressed and the byte (number) generated. So as to    -->
  <!-- avoid dealing with hexadecimal constants Karabiner gives them             -->
  <!-- names. E.g.: [ENTER] is 0x4c. Everywhere you see a Karabiner name you     -->
  <!-- should mentally think of it as a corresponding number or a physical       -->
  <!-- key. Think of names as placeholders or representations, not               -->
  <!-- meaning. These may later be mapped to something entirely different and    -->
  <!-- passed to your OS for further interpretation.                             -->
  <!--                                                                           -->
  <!-- NB: If you don't do anything fancy with your layout and you have a        -->
  <!-- standard QWERTY En keyboard chances are [osx] and [raw] will map onto     -->
  <!-- each other perfectly. Since this is the default we get really confused    -->
  <!-- when different layouts get into play, or seperate keys are re-mapped      -->
  <!-- to something different. If you remember one thing about Karabiner make    -->
  <!-- it this: it only deals with [raw] keys, which are referenced by their     -->
  <!-- names. This last point is the source of confusion, so always think:       -->
  <!-- name refers to a constant, not the meaning my mind is trying to attach    -->
  <!-- to it. Don't let your mind trick you. Who knew that phylosophy can be     -->
  <!-- so useful.                                                                -->
  <!--                                                                           -->
  <!-- Transformations:                                                          -->
  <!--                                                                           -->
  <!-- * [osx] -(1)- [raw] -(2)- [raw] -(3)- [osx]                               -->
  <!--                                                                           -->
  <!-- * [osx] -(in your head)- [raw] -(Karabiner)- [raw] -(in your head)- [osx] -->
  <!--                                                                           -->
  <!-- * Since -(2)- aka Karabiner only deals with [raw] this is what we need    -->
  <!-- to provide it. Unfortunately this is where you'll need to do the          -->
  <!-- mapping in your head: keys you want to send -(1)- and keys you want       -->
  <!-- received by OS -(3)- need to be mapped to physical [raw] keys on the      -->
  <!-- keyboard.                                                                 -->
  <!--                                                                           -->
  <!-- __Example__                                                               -->
  <!--                                                                           -->
  <!-- * My physical keyboard is a standard Macbook Air American-English         -->
  <!-- QWERTY                                                                    -->
  <!--                                                                           -->
  <!-- * However, I chose Dvorak layout in OS X System Prefs, so having          -->
  <!-- received a physical signal OS will preform transformation to              -->
  <!-- Dvorak. I.e. physical signal marked semicolon `;` on my keyboard will     -->
  <!-- translate into letter `s` by OSX.                                         -->
  <!--                                                                           -->
  <!-- * Now let's remap something with Karabiner. I want to be able to open     -->
  <!-- a search box (OS X find that's envoked with Command-f) by typing          -->
  <!-- Control-s on my Dvorak layout that is: [osx:C-s] to [osx: CMD-f]          -->
  <!--                                                                           -->
  <!-- * put differently [osx:C-s] [raw:???] -(Karabiner)- [raw:???] [osx:CMD-f] -->
  <!--                                                                           -->
  <!-- * simple but easily corruptable way to replace those ??? is to look at    -->
  <!-- the names spelled out on the keys you press to get at C-s and CMD-f       -->
  <!-- when typing Dvorak. Most of the time this is what you want and you'll     -->
  <!-- arrive at the right answer                                                -->
  <!--                                                                           -->
  <!-- * a bullet-proof way however is to use Karabiner's EventViewer to see     -->
  <!-- the KeyCodes generated. My advice go with phisical experiment no          -->
  <!-- guessing and hoping, it's not theoretical physics.                        -->
  <!--                                                                           -->
  <!-- * [osx:C-s] == [raw:C-SEMICOLON] to [raw:CMD-Y] == [osx:CMD-f]            -->

  <!-- Custom zeRusski layouts -->
  <inputsourcedef>
    <name>ZEDVORAK</name>
    <inputsourceid_prefix>org.unknown.keylayout.zeDvorak</inputsourceid_prefix>
  </inputsourcedef>

  <vkchangeinputsourcedef>
    <name>KeyCode::VK_CHANGE_INPUTSOURCE_ZEDVORAK</name>
    <inputsourceid_equal>org.unknown.keylayout.zeDvorak</inputsourceid_equal>
  </vkchangeinputsourcedef>

  <!-- MS external keyboard -->
  <devicevendordef>
    <vendorname>MS</vendorname>
    <vendorid>0x045e</vendorid>
  </devicevendordef>

  <deviceproductdef>
    <productname>MS_KEYBOARD</productname>
    <productid>0x07a5</productid>
  </deviceproductdef>


  <item>
    <name>vkz</name>

    <include path="{{ ENV_HOME }}/.personal_configs/vm.xml" />

    <item>
      <name>Overlaid OPTION_L</name>
      <appendix>Switch to Dvorak when typed alone</appendix>
      <identifier>remap.optionl_dvorak</identifier>
      <autogen>__KeyOverlaidModifier__ KeyCode::OPTION_L, KeyCode::OPTION_L, KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK</autogen>
    </item>

    <item>
      <name>Overlaid SPACE</name>
      <appendix>Insert SPACE when typed alone</appendix>
      <appendix>CONTROL in key combinations</appendix>
      <identifier>private.space_to_control_space</identifier>
      <inputsource_not>RUSSIAN</inputsource_not>
      <autogen>__KeyOverlaidModifier__ KeyCode::SPACE, KeyCode::CONTROL_L, KeyCode::SPACE</autogen>
    </item>

    <item>
      <name>Overlaid COMMAND_R</name>
      <appendix>Switch to Russian when typed alone</appendix>
      <identifier>private.option_r</identifier>
      <inputsource_not>RUSSIAN</inputsource_not>
      <block>
        <block>
          <device_only>DeviceVendor::MS, DeviceProduct::MS_KEYBOARD</device_only>
          <autogen>
            __KeyOverlaidModifier__
            KeyCode::OPTION_R,
            KeyCode::COMMAND_L,
            KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN
          </autogen>
        </block>
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::COMMAND_R,
          KeyCode::COMMAND_R,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN
        </autogen>
      </block>
    </item>

    <item>
      <name>Don't let Russian input source mess with modifier keys</name>
      <identifier>private.modifier_to_dvorak_layout</identifier>
      <block>
        <inputsource_only>RUSSIAN</inputsource_only>

        <!-- SPACE as CONTROL back -->
        <autogen>
          __KeyOverlaidModifier__
          KeyCode::SPACE,
          KeyCode::CONTROL_L,
          KeyCode::SPACE,

          Option::KEYTOKEY_BEFORE_KEYDOWN,
          KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
        </autogen>

        <!-- CONTROL_L back -->
        <autogen>
          --KeyToKey--
          KeyCode::CONTROL_L,
          KeyCode::CONTROL_L,

          Option::KEYTOKEY_BEFORE_KEYDOWN,
          KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
        </autogen>

        <!-- CONTROL_R back -->
        <autogen>
          --KeyToKey--
          KeyCode::CONTROL_R,
          KeyCode::CONTROL_R,

          Option::KEYTOKEY_BEFORE_KEYDOWN,
          KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
        </autogen>

        <!-- COMMAND_L back -->
        <autogen>
          --KeyToKey--
          KeyCode::COMMAND_L,
          KeyCode::COMMAND_L,

          Option::KEYTOKEY_BEFORE_KEYDOWN,
          KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
        </autogen>

        <!-- COMMAND_R back -->
        <autogen>
          --KeyToKey--
          KeyCode::COMMAND_R,
          KeyCode::COMMAND_R,

          Option::KEYTOKEY_BEFORE_KEYDOWN,
          KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

          Option::KEYTOKEY_AFTER_KEYUP,
          KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
        </autogen>

        <!-- COMMAND_R on MS back -->
        <block>
          <device_only>DeviceVendor::MS, DeviceProduct::MS_KEYBOARD</device_only>
          <autogen>
            --KeyToKey--
            KeyCode::OPTION_R,
            KeyCode::COMMAND_L,

            Option::KEYTOKEY_BEFORE_KEYDOWN,
            KeyCode::VK_CHANGE_INPUTSOURCE_DVORAK,

            Option::KEYTOKEY_AFTER_KEYUP,
            KeyCode::VK_CHANGE_INPUTSOURCE_RUSSIAN,
          </autogen>
        </block>

      </block>
    </item>

    <item>
      <name>CONTROL-m sends RETURN.</name>
      <identifier>private.global_command_m</identifier>
      <not>FINDER</not>
      <autogen>
        --KeyToKey--
        KeyCode::M, ModifierFlag::CONTROL_L,
        KeyCode::RETURN
      </autogen>
    </item>

    <include path="{{ ENV_HOME }}/.personal_configs/emacs-global.xml" />
    <include path="{{ ENV_HOME }}/.personal_configs/numbers.xml" />
    <include path="{{ ENV_HOME }}/.personal_configs/vkz-launcher.xml" />

  </item>

</root>
